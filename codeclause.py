# -*- coding: utf-8 -*-
"""CodeClause.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I_8QVZaTpZQIzH-U3En0lh1TF69hFKrA

#Project Title - Exploratory Data Analysis (EDA) on Iris Dataset.
#Project Level - Entry Level
"""

#Aim -
# Conduct exploratory data analysis on the famous Iris dataset to understand its
# characteristics and relationships between features.
# DescriptionUse libraries like Pandas, Matplotlib, and Seaborn to visualize patterns, distributions,
# and relationships in the Iris dataset.
# TechnologiesPython, Pandas, Matplotlib, Seaborn
# You can use other technologies that you know.
#What You LearnGain proficiency in data visualization and basic data manipulation using Pandas

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

df=pd.read_csv("/content/iris (1).csv")

df.head()

df.info()

df.describe()

df.columns

df.isnull().sum()

df.duplicated()

df.shape

df["Species"].value_counts()

# Visualize the data before handling outliers
plt.figure(figsize=(8, 6))
sns.boxplot(data=df)
plt.title("Data with Outliers")
plt.show()

"""#2D OR 3D Scatter Plot"""

import plotly.express as px
# 2D Scatter Plot
# Changed x and y to match column names from error message
fig = px.scatter(df, x="Sepal.Length", y="Sepal.Width", color="Species")
fig.show()

# 3D Scatter Plot
# Changed x, y and z to match column names from error message
print("3D scatter plot")
fig = px.scatter_3d(df, x="Sepal.Length", y="Sepal.Width", z="Petal.Length", color="Species")
fig.show()

# Pair plot
import matplotlib.pyplot as plt
sns.pairplot(df, hue='Species')
plt.show()

sns.kdeplot(df[['Sepal.Width', 'Sepal.Length']] , fill=True)
plt.show()

# Histogram for Sepal Length
plt.figure(figsize=(8, 6))
sns.histplot(df['Sepal.Length'], kde=True)  # Added kde for kernel density estimation
plt.title('Distribution of Sepal Length')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Frequency')
plt.show()

# Histogram for Sepal Width
plt.figure(figsize=(8, 6))
sns.histplot(df['Sepal.Width'], kde=True)
plt.title('Distribution of Sepal Width')
plt.xlabel('Sepal Width (cm)')
plt.ylabel('Frequency')
plt.show()

# Histogram for Petal Length
plt.figure(figsize=(8, 6))
sns.histplot(df['Petal.Length'], kde=True)
plt.title('Distribution of Petal Length')
plt.xlabel('Petal Length (cm)')
plt.ylabel('Frequency')
plt.show()

# Histogram for Petal Width
plt.figure(figsize=(8, 6))
sns.histplot(df['Petal.Width'], kde=True)
plt.title('Distribution of Petal Width')
plt.xlabel('Petal Width (cm)')
plt.ylabel('Frequency')
plt.show()

# Split data into features (X) and target (y)
X = df.drop('Species', axis=1)
y = df['Species']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train a Logistic Regression model
model = LogisticRegression(max_iter=1000)  # Increased max_iter
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model's accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of the Logistic Regression model: {accuracy}")

#Print classification report
!pip install scikit-learn
from sklearn.metrics import classification_report  # Import the classification_report function
print(classification_report(y_test, y_pred))

# Box plot
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='Species', y='Sepal.Length')
plt.title('Sepal Length Distribution by Species')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='Species', y='Sepal.Width')
plt.title('Sepal Width Distribution by Species')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='Species', y='Petal.Length')
plt.title('Petal Length Distribution by Species')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='Species', y='Petal.Width')
plt.title('Petal Width Distribution by Species')
plt.show()

# Calculate the correlation matrix, excluding non-numeric columns
correlation_matrix = df.select_dtypes(include=['number']).corr()

# Display the correlation matrix
print(correlation_matrix)

# Visualize the correlation matrix using a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix of Iris Features')
plt.show()

